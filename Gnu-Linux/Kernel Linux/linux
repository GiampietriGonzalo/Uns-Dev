en Linux, se puede generalizar que cada procesador de una máquina está haciendo alguna de estas tres cosas en un momento dado:
*En Kernel space, en "process context", ejecutando en nombre de algún proceso.
*En Kernel spacem en "interrupt context", manejando una interrupción
*EN user space, ejecutando código de un proceso de usuario.

El manejador de interrupciones no debe bloquearse nunca. Las operaciones largas y no críticas deberían ser diferidas ya que mientras el manejador se está ejecutando, las señales en la línea IRQ correspondiente son temporalmente ignoradas.
Linux implementa esto usando dos tipos de funciones diferibles ("bottom hakves") del kernel:

	*softirqs
	*tasklets




OBS:
	*Scheduler:El planificador (en inglés scheduler) es un componente funcional muy importante de los sistemas operativos multitarea y multiproceso, y es esencial en los sistemas operativos de tiempo real. Su función consiste en repartir el tiempo disponible de un microprocesador entre todos los procesos que están disponibles para su ejecución.


Existen dos grandes clasificaciones de kernels con respecto a su diseño: 

	*kernels monolíticos 
	*microkernels
	*Otras categorías, nanokernels, exokernels, etc,  se mencionan principalmente en entornos de investigación.

Kernels monolíticos: Se imlementan en forma de un gran programa corriendo en un único espacio de direccionamiento.
Todo corre dentro del kernel space. Simplicidad y performance como principales ventajas.
La mayoría de los kernel UNIX son monolíticos.

MicroKernels: La funcionalidad del Kernel está distribuida entre procesos separados, llamados "servers".
Sólo los procesos que realmente lo requieren son los que deberían ejecutar en el kernel space, el resto en user space.
Los servers se comunican a través de mensajes.
Diseño modular. Permite fácil reemplazo de subsistemas.
Cons: El pasaje de mensajes tiene mayor overhead que invocación directa a función. Se producen context-switches de kernels-space a user-space y viceversa.

En consecuencia, todos los sistemas basados en microkernels ahora ejecutan sus servers en el kernel space (Windows NT, Mach)

Linux: Monolítico moderno.

Toma muchas de las buenas ideas de los microkernels:
	*Diseño modular.
	*Scheduleable/preemptible.
	*Soporte para kernel threads.
	*Modulos Dinámicos en demanda.

No sufre la perdidad de performance asociada al modelo microkernel:
	*Todo corre en kernel mode.
	*Las comunicaciones es a través de invocaciones a funciones.


Kernels Monolíticos:
	*Linux
	*Kernels Unix tradicionales, como los BSDs
	*Solaris

Microkernels famosos:
	*Aix (IBM eServers pSeries, utilizando procesadores de la familia IBM POWER de 32 y 64bits)
	*Minix
	*Mach, usado en GNU Hurd y Mac OS X entre otros
	*QNX (real time)

Control Kernel Path: Un camino de control del kernel (KCP) denota una secuencia de instrucciones ejecutadas por el kernel. En el caso más simple, el kernel ejecuta un KCP completo, sin ser interrumpido. Pero hay otros casos.

Algunas formas de sincronizar los KCPs:
	*Deshabilitación de la capacidad de preemption
	*Deshabilitación de las interrupciones
	*Semáforos
	*Spinlocks

Semáforos: Una variable enterta asociada a la estructura de datos que queremos protejer.
Una lista de procesos y dos operaciones: down() y up(). Los procesos se floquean y se agregan a la lista cuando la estructura está siendo usada.

Spinlocks: Si la sección crítica es pequeña (se requiere poco tiempo para acceder/modificar el dato) un semáforo puede ser ineficiente.
Cuando un KCP encuentra el lock tomado, ejecuta un loop cerrado (busy waiting).

El kernel no tiene acceso a librería de C. Está codificado con GNU C.
Cuando una aplicación de usuario intenta un acceso a memoria ilegal, el kernel maneja la excepción producida, envía SIGSEGV y mata al proceso. 

Las violaciones de memoria del kernel resultan en “oops”. Un “oops” es un error principal en el kernel, que produce un mensaje de error en la consola, hace un dump de los registros y prove éun back trace.

Si el oops ocurre en contexto de interrupción, en la tarea idle (pid 0) o la tarea init (pid 1) se produce un “panic” (caida instantánea del sistema)
En otros casos, el kernel mata el proceso y trata de continuar ejecutándose, aunque podría quedar en un estado inconsistente

La memoria del kernel no es paginable. Cda byte consumido por el kernel es un byte menos de memoria física disponible.

La pila del kernel es pequeña y de tamaño fijo. El tamaño exacto varía con la arquitectura. En x86, el tamaño es configurable en momento de compilación y puede ser de una o dos páginas.
Históricamente, la pila del kernel es de dos páginas, lo que generalmente implica que es de 8KB en arquitecturas de 32 bits y 
de 16KB en arquitecturas de 64 bits.Cada proceso tiene hay una pila distinta en kernel mode

El kernel no tiene acceso a printf(), pero puede usar printk(), la cual copia el string formateado en el buffer de log del kernel, el cual será leido normalmente por syslog.

Lenguajes para desarrollar en Linux: ISO C99 y GNU C. Ambos con GCC

Funciones Inline

*Con una función inline, el código de la función es insertado en el lugar de cada invocación. Esto elimina el overhead del salto y el regreso (register saving and restore) y permite una mejor optimización del código (porque el compilador puede optimizar juntos al código invocante y el código invocado).
*La desventaja es el incremento en el tamaño del código, el cual consume más memoria y espacio en cache de instrucciones (footprint).
*Los desarrolladores usan funciones inline para funciones pequeñas y de tiempo de respuesta rápido. Se prefieren éstas antes que macros complicadas por razones de seguridad de tipos.
*Una declaración ejemplo: static inline void convertir (unsigned long valor) {...}
*Se suelen definir en los headers y como son estáticas, no se exportan a otros archivos

Assembly Inline

El compilador gcc permite embeber instrucciones assembly en funciones C utilizando la directiva al compilador asm().
El kernel Linux está programado en C en su mayoría y se usa assembly en las partes de código de bajo nivel dependientes de la arquitectura y aquellas funcionalidades cuya eficiencia es crítica


Optimización de saltos
El compilador gcc tiene una directiva que permite la optimización de saltos condicionales, dependiendo de la probabilidad de que el salto se produzca o no.

En el kernel se usan las macros likely() y unlikely() para indicar esa probabilidad.


if (likely(seCumpleAlgo)){
	/* ... */
}

Estas directivas resultan en una mejora de performance cuando la 
predicción resulta correcta, pero significan un costo si la predicción es incorrecta.
Un uso muy común para likely() y unlikely() son la verificación de errores. En el kernel, unlikely() es bastante más usado que likey() ya que las sentencias if tienden a indicar algún caso especial

