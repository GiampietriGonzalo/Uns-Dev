1)​Describa cómo es la ​estructura ​de los mensajes HTTP. Muestre el primer
par de mensajes ​requerimiento/respuesta ​de al menos 3 páginas web. ¿Cuántos
objetos adicionales ​son recuperados a partir del pedido inicial?

Estructura de los mensajes HTTP (http request)

*Línea de requerimiento (request line)
Describe la petición a ser implementada, o su estado, sea éxito o fracaso. Está línea de comienzo es siempre una única línea.

*Un grupo opcional de cabeceras de requerimiento (request header).
Indican la petición o descrie el cuerpo (body) que incluye el mensaje.

*Una línea vacía (empty linea).
Indica toda la meta-información que ha sido enviada

*Un cuerpo opcional (optional body).
Lleva los datos asociados a la petición, o los archivos o documentos asociados a la respuesta (response).La presencia del cuerpo y su tamaño se indican en la línea de inicio y en las cabeceras.

2) Enuncie los distintos ​Métodos de Requests ​de HTTP/1.1, explique brevemente los más utilizados.

Las peticiones HTTP son mensajes enviados por un cliente, para iniciar una acción en el servidor. Su línea de inicio está formada por tres elementos: 

Un método HTTP se presenta con un verbo como: GET, PUT o POST o un nombre como: HEAD o  OPTION, que describen la acción que se pide sea realizada. Por ejemplo, GET indica que un archivo ha de ser enviado hacia el cliente, o POST indica que hay datos que van a ser enviados hacia el servidor (creando o modificando un recurso, o generando un documento temporal para ser enviado).

La especificación de HTTP/1.0 define los métodos a GET, HEAD y Post, y la especicifación de HTTP/1.1 agrega cinco nuevos métodos: OPTION, PUT, DELETE, TRACE y CONNECT.
Los nombres de los métodos son case-sensitive.



GET: El método GET solicita una representación del recurso especificado. Las solicitues GET solo deberían recuperar datos y no tenes otro efecto.


HEAD: El método HEAD pide por una respuesta idéntica a la solicitada por el GET, pero sin el cuerpo de la respuesta. Esto es útil para recuperar meta-información escrita en headers de respuesta, sin tener que transportar todo el contenido de la respuesta.

    The POST method requests that the server accept the entity enclosed in the request as a new subordinate of the web resource identified by the URI. The data POSTed might be, for example, an annotation for existing resources; a message for a bulletin board, newsgroup, mailing list, or comment thread; a block of data that is the result of submitting a web form to a data-handling process; or an item to add to a database.[23]

POST: El método POST solicita que el servido acepte la entidad contenida en la solicitud como un nuevo elemento del recurso de la web identificada por la URI. La información POSTeada puede ser, por ejemplo, una anotiación de un recurso existente.

PUT: El método PUT solicita que el elemento contenido se almacene en la URI indicada. Si la URI hace referencia a un recurso existente, lo modifica. Si la URI no hace referencia a un recurso existente, entocnes el servidor puede crear un recurso con esa URI.

DELETE: El método DELETE elimina el recurso especificado.

TRACE: El método TRACE imita el solicitud recibida para que el cliente puede ver si hubo algún cambio o adición por servidores intermediarios.

OPTIONS: El métod OPTIONS retorna los métodos HTTP que el servidor soporta para URL especificada. Este método puede ser usado para checkear la funcionalida de un servidor mediante '*' en lugar de especificar un recurso.

CONNECT: El método CONNECT convierte la solicitud de conección a un túnel transparente TCP/IP, usualmente para facilitar la comunicación con encriptación SSL (HTTPS) mediante un proxy no encriptado (HTTP).

PATCH: El método PATCH aplica modificaciones parciales a un recurso.

Todos los servidores HTTP de proposito general deben implementar al menos los métodos GET y HEAD; el resto de los métodos son considerados como opcional por especificación.

3) ​Liste las distintas ​categorías de códigos de estado ​ejemplificando en
cada uno de ellos

Desde HTTP/1.0, la primer línea de una respuesta HTTP es llamada "estado de línea" e incluye un código numérico de estado (ej: "404") y una razón (ej: "Not Found"). La forma en que el agente del usuario maneja la repuesta depende en primer lugar en el código, y luego con los otros headers de la respuesta. Los códigos de estados personalizados pueden ser usados, por  si el agente del suuario encuentra un código no reconocido; puede usar el primer dígito del código para determinar el tipo general de respuesta.


Categorías de códigos de estado

1xx: Información
2xx: Exito
3xx: Redireccionamiento
4xx: Error del cliente
5xx: Error de servidor


Ejercicio 4. ​¿Qué ​tipos de encabezados ​distingue la especificación del protocolo
HTTP? ¿Qué ​información ​se puede obtener de los distintos encabezados? Trate de
identificar la mayor cantidad de parámetros posibles accediendo a 3 páginas web.

HTTP header fields are components of the header section of request and response messages in the Hypertext Transfer Protocol (HTTP). They define the operating parameters of an HTTP transaction.

Los encabezados HTTP son componentes del encabezado de un mensaje de respuesta y de requerimiento en el protocolo HTTP. Definen los parámetros operacionales de una transacción HTTP.
Header field names are case-insensitive

Header fields are colon-separated key-value pairs in clear-text string format, terminated by a carriage return (CR) and line feed (LF) character sequence. The end of the header section is indicated by an empty field(line), resulting in the transmission of two consecutive CR-LF pairs.

Nombre de los headers
Los nombres de los encabezados son case-INsensitive (contrario a los nombres de los métodos).

Valores de los campos de los headers
A few fields can contain comments (i.e. in User-Agent, Server, Via fields), which can be ignored by software.

Límite de tamaño
The standard imposes no limits to the size of each header field name or value, or to the number of fields. However, most servers, clients, and proxy software impose some limits for practical and security reasons.



5)​Ejemplifique posibles valores que puede obtener el parámetro
“ ​Content-Type ​” del encabezado de una respuesta. ¿Existe alguna relación entre este
parámetro y el parámetro “ ​Accept ​” del encabezado de un requerimiento?

Content-Type := type "/" subtype *[";" parameter]

POSIBLES VALORES
type := "application" / "audio" / "image" / "message" / "multipart" / "text" / "video" / x-token 

Si el mensaje incluye un cuerpo, entonces habrá dos headers que describen ese cuerpo:

*Content-Type: MIME-type del cuerpo, como text/html or image/gif.

*Content-Length: número de bytes en el cuerpo.


6)El header User-agent contiene información sobre el usuario origen del requierimiento (request).
El string que contiene el user-agent es usualment eusado para content negotiation, donde el servidor de origne selecciona el contenido adecuado o parametros de operación para la respuesta. Por ejemplo: el string del user-agent puede ser usado por un servidor web para eleguir variantes basado en las capacidaddes de la versión del software del cliente.



formato: User-Agent     = "User-Agent" ":" 1*( product | comment )
			User-Agent: <product> / <product-version> <comment>
		User-Agent: Mozilla/<version> (<system-information>) <platform> (<platform-details>) <extensions>

ejemplos:    User-Agent: CERN-LineMode/2.15 libwww/2.17b3

			Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Mobile/7B405

7)






